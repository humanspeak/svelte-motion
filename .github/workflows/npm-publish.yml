# 1. Workflow metadata
name: Publish to NPM

permissions:
    contents: read
    packages: read
    pull-requests: read

# 2. Trigger conditions
on:
    pull_request:
        types: [closed]
        branches:
            - main
            - '!dependabot/**'
        paths:
            - src/**
            - '!tests/**'
            - '!src/lib/test/**'
            - '!src/routes/**'
            - package.json
            - package-lock.json
            - .github/workflows/npm-publish.yml
    workflow_dispatch:
        inputs:
            # trunk-ignore(checkov/CKV_GHA_7): We need manual version control for releases
            version_bump:
                description: Version bump type (major/minor/patch) or skip
                required: true
                type: choice
                options:
                    - skip
                    - patch
                    - minor
                    - major
            custom_message:
                description: Release message
                required: false
                type: string

jobs:
    check-if-merged:
        runs-on: ubuntu-latest
        outputs:
            should_run: ${{ steps.check.outputs.should_run }}
        steps:
            - id: check
              env:
                  EVENT_NAME: ${{ github.event_name }}
                  PR_MERGED: ${{ github.event.pull_request.merged }}
              run: |
                  if [[ "$EVENT_NAME" == "pull_request" && "$PR_MERGED" != "true" ]]; then
                      echo "should_run=false" >> $GITHUB_OUTPUT
                  else
                      echo "should_run=true" >> $GITHUB_OUTPUT
                  fi

    debug-check:
        needs: check-if-merged
        if: needs.check-if-merged.outputs.should_run == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4 # zizmor: ignore[unpinned-uses]
              with:
                  persist-credentials: false
                  token: ${{ secrets.ACTIONS_KEY }}

            - name: Check for debugging statements
              run: |
                  # Function to check file content
                  check_file() {
                    local file="$1"
                    local has_debug=false
                    local debug_output=""

                    # Check for $inspect (not in comments)
                    if grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*\$inspect' "$file" > /dev/null; then
                      match=$(grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*\$inspect.*' "$file" | head -n 1)
                      line_num=$(echo "$match" | cut -d: -f1)
                      statement=$(echo "$match" | cut -d: -f2-)
                      echo "::error file=$file::Found \$inspect statement on line $line_num: $statement"
                      has_debug=true
                    fi

                    # Check for console.log (not in comments)
                    if grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*console\.log' "$file" > /dev/null; then
                      match=$(grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*console\.log.*' "$file" | head -n 1)
                      line_num=$(echo "$match" | cut -d: -f1)
                      statement=$(echo "$match" | cut -d: -f2-)
                      echo "::error file=$file::Found console.log statement on line $line_num: $statement"
                      has_debug=true
                    fi

                    # Check for console.debug (not in comments)
                    if grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*console\.debug' "$file" > /dev/null; then
                      match=$(grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*console\.debug.*' "$file" | head -n 1)
                      line_num=$(echo "$match" | cut -d: -f1)
                      statement=$(echo "$match" | cut -d: -f2-)
                      echo "::error file=$file::Found console.debug statement on line $line_num: $statement"
                      has_debug=true
                    fi

                    # Check for debugger statements (not in comments)
                    if grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*debugger;' "$file" > /dev/null; then
                      match=$(grep -n -P '^(?!\s*//|\s*/\*|\s*\*).*debugger;' "$file" | head -n 1)
                      line_num=$(echo "$match" | cut -d: -f1)
                      statement=$(echo "$match" | cut -d: -f2-)
                      echo "::error file=$file::Found debugger statement on line $line_num: $statement"
                      has_debug=true
                    fi

                    $has_debug && return 1 || return 0
                  }

                  # Set up file descriptor for output capture
                  exec 5>&1

                  # Run checks and capture output
                  OUTPUT=$(
                    {
                      has_errors=0

                      # Check Svelte files
                      while IFS= read -r file; do
                        if ! check_file "$file"; then
                          has_errors=1
                        fi
                      done < <(find src/lib -type f -name "*.svelte" ! -path "*/test/*")

                      # Check TypeScript files
                      while IFS= read -r file; do
                        if ! check_file "$file"; then
                          has_errors=1
                        fi
                      done < <(find src/lib -type f -name "*.ts" ! -name "*.test.ts" ! -path "*/test/*")

                      exit $has_errors
                    } | tee >(cat >&5)
                  )

                  # Store output for the next step
                  {
                    echo "DEBUG_OUTPUT<<EOF"
                    echo "$OUTPUT"
                    echo "EOF"
                  } >> $GITHUB_ENV

                  # Exit with the original error code
                  [[ $OUTPUT == *"::error"* ]] && exit 1 || exit 0

            - name: Upload Results
              if: failure() && github.event_name == 'pull_request'
              uses: actions/github-script@v7 # zizmor: ignore[unpinned-uses]
              with:
                  github-token: ${{ secrets.ACTIONS_KEY }}
                  script: |
                      const fs = require('fs');
                      const { owner, repo } = context.repo;

                      // Get the debug check output
                      const debugOutput = process.env.DEBUG_OUTPUT || '';

                      let commentBody = '❌ Debug statements check failed.\n\nFound debugging statements in the following locations:\n\n';

                      // Add each error location to the comment
                      debugOutput.split('\n').forEach(line => {
                          if (line.includes('::error file=')) {
                              const match = line.match(/::error file=(.+?)::(.+)/);
                              if (match) {
                                  const [_, file, message] = match;
                                  commentBody += `- ${file}: ${message}\n`;
                              }
                          }
                      });

                      commentBody += '\nPlease remove these debugging statements before merging.';

                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: owner,
                          repo: repo,
                          body: commentBody
                      });

            - name: Show Results
              if: failure() && github.event_name == 'workflow_dispatch'
              run: |
                  echo "::group::Debug Check Results"
                  echo "$DEBUG_OUTPUT"
                  echo "::endgroup::"
                  echo "❌ Debug statements were found. Please remove them before proceeding."
                  exit 1

    # 3. Testing jobs (grouped together)
    build:
        needs: [check-if-merged, debug-check]
        if: needs.check-if-merged.outputs.should_run == 'true'
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [20, 22]
        permissions:
            contents: read
            packages: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4 # zizmor: ignore[unpinned-uses]
              with:
                  persist-credentials: false
                  token: ${{ secrets.ACTIONS_KEY }}

            - uses: pnpm/action-setup@v4 # zizmor: ignore[unpinned-uses]
              with:
                  version: 10

            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4 # zizmor: ignore[unpinned-uses]
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: pnpm

            - name: Install
              run: |
                  pnpm install --prefer-offline --no-frozen-lockfile --ignore-scripts
                  pnpm run build

            - name: Test
              run: pnpm test

            - name: Upload Vitest Results
              if: always()
              uses: trunk-io/analytics-uploader@main # zizmor: ignore[unpinned-uses]
              with:
                  junit-paths: junit-vitest.xml
                  org-slug: ${{ secrets.TRUNK_ORG_SLUG }}
                  token: ${{ secrets.TRUNK_TOKEN }}

            - name: Upload coverage to Coveralls
              uses: coverallsapp/github-action@v2 # zizmor: ignore[unpinned-uses]
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  flag-name: node-${{ matrix.node-version }}
                  parallel: true
              if: matrix.node-version == '22'

            - name: Cache dependencies
              uses: actions/cache@v4 # zizmor: ignore[unpinned-uses]
              with:
                  path: ~/.pnpm-store
                  key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-node-${{ matrix.node-version }}-
                      ${{ runner.os }}-node-

    # 4. Coverage reporting (depends on tests)
    coverage-report:
        needs: [check-if-merged, build]
        if: needs.check-if-merged.outputs.should_run == 'true'
        runs-on: ubuntu-latest
        steps:
            - name: Coveralls Finished
              uses: coverallsapp/github-action@v2 # zizmor: ignore[unpinned-uses]
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  parallel-finished: true

    # 5. Publishing job (main deployment logic)
    publish-github-packages:
        needs: [check-if-merged, build, coverage-report]
        if: needs.check-if-merged.outputs.should_run == 'true'
        runs-on: ubuntu-latest
        permissions:
            contents: write
            packages: write
            issues: write
            pull-requests: write
            id-token: write

        steps:
            - name: Checkout
              uses: actions/checkout@v4 # zizmor: ignore[unpinned-uses]
              with:
                  persist-credentials: false
                  token: ${{ secrets.GITHUB_TOKEN }}
                  fetch-depth: 0

            - uses: pnpm/action-setup@v4 # zizmor: ignore[unpinned-uses]
              with:
                  version: 10

            - name: Use Node.js - 22
              uses: actions/setup-node@v4 # zizmor: ignore[unpinned-uses]
              with:
                  node-version: 22
                  registry-url: https://registry.npmjs.org
                  scope: '@humanspeak'

            - name: Install
              run: pnpm install --prefer-offline --no-frozen-lockfile --ignore-scripts

            - name: Check Publishing Status
              id: publish-check
              env:
                  EVENT_NAME: ${{ github.event_name }}
                  IS_MERGED: ${{ github.event.pull_request.merged }}
                  HAS_SKIP_LABEL: ${{ contains(github.event.pull_request.labels.*.name, 'skip-publish') }}
                  INPUT_VERSION: ${{ github.event.inputs.version_bump }}
              run: |
                  # Validate event name first
                  if [[ "$EVENT_NAME" != "pull_request" && "$EVENT_NAME" != "workflow_dispatch" ]]; then
                    echo "Invalid event type"
                    exit 1
                  fi

                  # Check publishing conditions
                  if [[ "$EVENT_NAME" == "pull_request" ]]; then
                    if [[ "$IS_MERGED" != "true" ]]; then
                      echo "PR not merged, skipping publish"
                      echo "should_publish=false" >> $GITHUB_OUTPUT
                    elif [[ "$HAS_SKIP_LABEL" == "true" ]]; then
                      echo "Publishing skipped due to skip-publish label"
                      echo "should_publish=false" >> $GITHUB_OUTPUT
                    else
                      echo "should_publish=true" >> $GITHUB_OUTPUT
                    fi
                  elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$INPUT_VERSION" == "skip" ]]; then
                    echo "Publishing skipped via manual selection"
                    echo "should_publish=false" >> $GITHUB_OUTPUT
                  else
                    echo "should_publish=true" >> $GITHUB_OUTPUT
                  fi

            - name: Create Comment on Skip
              if: github.event_name == 'pull_request' && steps.publish-check.outputs.should_publish == 'false'
              uses: actions/github-script@v7 # zizmor: ignore[unpinned-uses]
              with:
                  github-token: ${{ secrets.ACTIONS_KEY }}
                  script: |
                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: '⏭️ NPM publishing was skipped due to the `skip-publish` label.'
                      })

            - name: Release with Changesets
              if: steps.publish-check.outputs.should_publish == 'true'
              uses: changesets/action@v1 # zizmor: ignore[unpinned-uses]
              with:
                  version: pnpm cs:version
                  publish: pnpm cs:publish
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_GITHUB_TOKEN }}
            # The Changesets step above handles version PRs and publish; remove manual release/publish

            # Cleanup step for manual releases removed; Changesets manages tags/releases

            - name: Notify on failure
              if: failure()
              uses: actions/github-script@v7 # zizmor: ignore[unpinned-uses]
              with:
                  github-token: ${{ secrets.ACTIONS_KEY }}
                  script: |
                      github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: '❌ Release workflow failed. Please check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
                      })
